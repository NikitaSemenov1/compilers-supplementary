-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[st, wrld], stmt) {
  case stmt of 
    Assn (x, expr) -> [st <- [x, evalExpr(st, expr)], wrld]
    | Seq (stmt1, stmt2) -> eval(eval([st, wrld], stmt1), stmt2)
    | Skip -> c
    | Read (x) -> 
      case readWorld(wrld) of 
        [v, newWrld] -> [st <- [x, v], newWrld]
      esac
    | Write (e) -> [st, writeWorld(evalExpr(st, e), wrld)]
    | If (e, stmt1_, stmt2_) ->
      case evalExpr(st, e) of 
        0 -> eval(c, stmt2_) |
        _ -> eval(c, stmt1_)
      esac
    | While (e, stmt_) -> 
      case evalExpr(st, e) of
        0 -> c |
        _ -> eval(eval(c, stmt_), While (e, stmt_))
      esac
    | DoWhile (stmt_, e) -> eval(eval(c, stmt_), While (e, stmt_))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
