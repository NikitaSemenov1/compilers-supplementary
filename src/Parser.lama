-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;
import Matcher;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun toBinOp(lhs, op, rhs) {
  Binop (op, lhs, rhs)
}

-- Primary expression
var primary = memo $ eta syntax (
  x=decimal {Const (stringInt (x))} |
  x=lident  {Var (x)} |
  inbr[s("("), exp, s(")")]),
    exp = memo $ eta (
      expr(
        {
          [Left, {[s("&&") | s("!!"), toBinOp]}],
          [Left, {[s("==") | s("!=") | s("<") | s(">") | s("<=") | s(">="), toBinOp]}],
          [Left, {[s("+") | s("-"), toBinOp]}],
          [Left, {[s("*") | s("/") | s("%"), toBinOp]}]
        }, primary)
    );

var afterIf = memo $ eta syntax (
  kElif e=exp kThen s1=stmt s2=afterIf {If (e, s1, s2)} |
  kElse s=stmt kFi {s} |
  kFi {Skip}
);

var cond = memo $ eta syntax (
  kIf e=exp kThen s1=stmt s2=afterIf {If (e, s1, s2)}
);

var cycle = memo $ eta syntax (
  kWhile e=exp kDo s=stmt kOd {While (e, s)} |
  kDo s=stmt kWhile e=exp kOd {DoWhile (s, e)} |
  kFor s1=stmt s[","] e=exp s[","] s2=stmt kDo s3=stmt kOd {Seq(s1, While (e, Seq (s3, s2)))}
);

var singleStmt = memo $ eta syntax (
    kRead x=inbr[s("("), lident, s(")")] {Read (x)} |
    kWrite e=exp {Write (e)} |
    kSkip {Skip} |
    x=lident s[":="] e=exp {Assn(x, e)} |
    cycle |
    cond
);

var stmt = memo $ eta syntax (
  singleStmt |
  x=singleStmt s[";"] y=stmt {Seq(x, y)}
);

-- Public top-level parser
public parse = stmt;
