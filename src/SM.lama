-- Stack machine.

import List;
import World;
import State;
import Expr;
import Buffer;
import Fun;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  case i of
    READ      -> sprintf ("READ")
  | WRITE     -> sprintf ("WRITE")
  | BINOP (s) -> sprintf ("BINOP %s", s)
  | LD    (x) -> sprintf ("LD %s", x)
  | ST    (x) -> sprintf ("ST %s", x)
  | CONST (n) -> sprintf ("CONST %d", n)
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

fun evalInsn([stack, st, world], i) {
  case i of
    READ -> 
      case readWorld(world) of 
        [v, newWrld] -> [v:stack, st, newWrld]
      esac
  | WRITE -> 
      case stack of
        z:s -> [s, st, writeWorld(z, world)]
      esac
  | BINOP (op) -> 
      case stack of 
        y:x:s -> [(str2op(op)(x, y)):s, st, world]
      esac
  | LD (x) -> [st(x):stack, st, world]
  | ST (x) -> 
      case stack of 
        z:s -> [s, st <- [x, z], world]
      esac
  | CONST (n) -> [n:stack, st, world]
  esac
}

-- Stack machine interpreter. Takes an SM-configuration and a program,
-- returns a final configuration
fun eval (c, insns) {
  case insns of
    {} -> c
    | h:t -> eval(evalInsn(c, h), t)
  esac
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval ([{}, emptyState, createWorld (input)], insns)[2].getOutput
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list 
-- of stack machine instructions
fun compileExpr (expr) {
  case expr of 
    Var (x) -> {LD (x)}
    | Const (cnst) ->  {CONST (cnst)}
    | Binop (op, expr1, expr2) -> compileExpr(expr1) +++ compileExpr(expr2) +++ {BINOP (op)}
  esac
}

-- Compiles a statement into a stack machine code.
-- Takes a statement, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  case stmt of 
    Assn (x, expr) -> compileExpr(expr) +++ {ST (x)}
    | Seq (stmt1, stmt2) -> compileSM(stmt1) +++ compileSM(stmt2)
    | Skip -> {}
    | Read (x) -> {READ} +++ {ST (x)}
    | Write (e) -> compileExpr(e) +++ {WRITE}
  esac
}
