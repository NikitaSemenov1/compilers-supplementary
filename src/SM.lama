-- Stack machine.

import Ref;
import Array;
import List;
import Fun;
import Collection;
import World;
import State;
import Parser;
import Lexer;
import Expr;
import Buffer;

-- Stack code printer. Takes a list of SM instructions, return its
-- string representation.
public fun showSMInsn (i) {
  -- Shows a location (a reference to function argument, local or global variable)
  fun showLoc (d) {
    case d of
      Arg (i) -> sprintf ("arg[%d]", i)
    | Loc (i) -> sprintf ("loc[%d]", i)
    | Glb (x) -> x
    esac
  }

  case i of
    READ             -> "READ"
  | WRITE            -> "WRITE"
  | BINOP  (s)       -> sprintf ("BINOP %s", s)
  | LD     (x)       -> sprintf ("LD %s", showLoc (x))
  | LDA    (x)       -> sprintf ("LDA %s", showLoc (x))
  | ST     (x)       -> sprintf ("ST %s", showLoc (x))
  | STI              -> "STI"
  | CONST  (n)       -> sprintf ("CONST %d", n)
  | LABEL  (s)       -> sprintf ("LABEL %s", s)
  | JMP    (l)       -> sprintf ("JMP %s", l)
  | CJMP   (c, l)    -> sprintf ("CJMP %s, %s", c, l)
  | CALL   (f, n)    -> sprintf ("CALL %s, %d", f, n)
  | BEGIN  (f, a, l) -> sprintf ("BEGIN %s, %d, %d", f, a, l)
  | GLOBAL (x)       -> sprintf ("GLOBAL %s", x)
  | END              -> sprintf ("END")
  | DUP              -> "DUP"
  | DROP             -> "DROP"
  esac
}

public fun showSM (prg) {
  map (fun (i) {showSMInsn (i) ++ "\n"}, prg).stringcat
}

-- Evaluation environment: keeps a mapping between labels and (sub)programs
fun initEvalEnv (insns) {
  var map =
    fix (fun (rec) {
          fun ([m, insns]) {
            case insns of
              {}               -> m
            | LABEL (lab) : tl -> rec ([addMap (m, lab, insns), tl])
            | _ : tl           -> rec ([m, tl])
            esac
          }
        }) $ [emptyMap (compare), insns];

  [fun (l) {
     case findMap (map, l) of Some (insns) -> insns esac
  }]
}

-- Accessor function
fun fromLabel (env, lab) {
  env [0] (lab)
}

-- Stack machine interpreter. Takes an environment, a world and a program,
-- returns a final output
fun eval (env, w, insns) {
  -- Global state maps names of global variables to values
  var globalState = ref (fun (x) {error (sprintf ("name ""%s"" is undefined", x), getLoc (x))});

  -- Make a fresh local state: a pair of arrays for arguments and local variables;
  -- takes the numbers of arguments and local variables respectively
  fun makeState (a, l) {
    [initArray (a, fun (_) {0}), initArray (l, fun (_) {0})]
  }

  -- Lookups a location in local/global states
  fun lookup ([args, locs], loc) {
    case loc of
      Arg (i) -> args[i]
    | Loc (i) -> locs[i]
    | Glb (x) -> deref (globalState) (x)
    esac
  }

  -- Assigns a value to a location
  fun assign ([args, locs], loc, v) {
    case loc of
      Arg (i) -> args[i] := v
    | Loc (i) -> locs[i] := v
    | Glb (x) -> var g = deref (globalState);
                 globalState ::= fun (y) {if compare (x, y) == 0 then v else g (y) fi}
    esac
  }

  -- Takes n positions from the list, retursn a pair: the remaining list and the taken
  -- sublist
  fun take (list, n) {
    fun inner (n, acc, list) {
      if n == 0
      then [list, acc]
      else inner (n-1, list.hd : acc, list.tl)
      fi
    }

    inner (n, {}, list)
  }

  fun evalInsn(c@[stack, cst, st@[args, locs], world], i, suf) {
    case i of
    GLOBAL (_) -> [c, suf] 
    | CALL (name, _) -> [[stack, [st, suf]:cst, st, world], fromLabel(env, name)]
    | BEGIN (_, nargs, nlocals) -> 
        case take(stack, nargs) of
          [stack, args] -> [[stack, cst, [listArray(args), initArray(nlocals, fun(_){0})], world], suf]
        esac
    | END -> 
        case stack of
          {} -> evalInsn([0:stack, cst, st, world], i, suf)
          | _ ->
              case cst of 
                {} -> [[stack, cst, st, world], {}]
                | [st, suf]:cst -> [[stack, cst, st, world], suf]
              esac
         
        esac
    | READ -> 
        case readWorld(world) of 
          [v, newWrld] -> [[v:stack, cst, st, newWrld], suf]
        esac
    | WRITE -> 
        case stack of
          z:s -> [[s, cst, st, writeWorld(z, world)], suf]
        esac
    | BINOP (op) -> 
        case stack of 
          y:x:s -> [[evalOp(op, x, y):s, cst, st, world], suf]
        esac
    | LD (x) -> [[lookup(st, x):stack, cst, st, world], suf]
    | ST (x) -> 
        case stack of 
          z:s -> assign(st, x, z); [[z:s, cst, st, world], suf]
        esac
    | CONST (n) -> [[n:stack, cst, st, world], suf]
    | LABEL (lab) -> [c, suf]
    | JMP (lab) -> [c, fromLabel(env, lab)]
    | CJMP (cond, lab) -> 
      case stack of 
        0:tail -> 
          case cond of 
            "z" -> [[tail, cst, st, world], fromLabel(env, lab)] |
            "nz" -> [[tail, cst, st, world], suf]
          esac
        | nz:tail -> 
          case cond of 
            "nz" -> [[tail, cst, st, world], fromLabel(env, lab)] |
            "z" -> [[tail, cst, st, world], suf]
          esac
      esac
    | LDA (x) -> [[x:stack, cst, st, world], suf]
    | STI -> 
        case stack of 
          n:x:tail -> assign(st, x, n); [[n:tail, cst, st, world], suf]
        esac
    | DROP ->
        case stack of 
          v:tail -> [[tail, cst, st, world], suf]
        esac
    esac
  }

  -- Core interpreter: takes a configuration and a program, returns a configuration
  (* Assignment *)
  fun eval (c, insns) {
    case insns of
      {} -> c
      | h:t -> 
          case evalInsn(c, h, t) of 
            [c, t] -> eval(c, t)
          esac
    esac
  }
  (* End *)

  eval ([{}, {}, makeState (0, 0), w], insns) [3].getOutput
}

-- Runs a stack machine for a given input and a given program, returns an output
public fun evalSM (input, insns) {
  eval (initEvalEnv (insns), createWorld (input), insns)
}

-- Compilation environment: generates labels
fun makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, functions) {
  -- Generates a new label
  fun genLabel () {
    [sprintf ("L%d", nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
  }

  -- Adds a new function
  fun rememberFun (fLabel, args, body) {
    makeCompEnv (nLabels,
                 scopeDepth,
                 state,
                 nLocals,
                 nArgs,
                 Fun (fLabel, args, body, state) : functions)
  }

  -- Enters a local scope
  fun beginScope () {
    makeCompEnv (nLabels, scopeDepth+1, enterScope (state), nLocals, nArgs, functions)
  }

  -- Leaves a local scope
  fun endScope () {
    makeCompEnv (nLabels, scopeDepth-1, leaveScope (state), nLocals, nArgs, functions)
  }

  -- Adds an argument for the current function
  fun addArg (name) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Arg (nArgs)), nLocals, nArgs+1, functions)
  }

  -- Adds a local variable for the current function
  fun addVar (name) {
    if scopeDepth == 1
    then makeCompEnv (nLabels, scopeDepth, addName (state, name, Glb (name)), nLocals, nArgs, functions)
    else makeCompEnv (nLabels, scopeDepth, addName (state, name, Loc (nLocals)), nLocals+1, nArgs, functions)
    fi
  }

  -- Adds a binding for a function
  fun addFun (name, fLabel, nargs) {
    makeCompEnv (nLabels, scopeDepth, addName (state, name, Fun (fLabel, nargs)), nLocals, nArgs, functions)
  }

  -- Enters a function
  fun beginFun (state) {
    makeCompEnv (nLabels, 1, enterFunction (state), 0, 0, functions)
  }

  -- Get functions and empty functions list
  fun getFuns () {
    [functions, makeCompEnv (nLabels, scopeDepth, state, nLocals, nArgs, {})]
  }

  -- Lookups a name of a variable
  fun lookupVar (name) {
    case lookup (state, name) of
      Fun (_, _) -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
    | x          -> x
    esac
  }

  -- Lookups a name of a function
  fun lookupFun (name) {
    case lookup (state, name) of
      x@Fun (_, _) -> x
    | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
    esac
  }

  -- Gets the number of local variables
  fun getLocals () {
    nLocals
  }

  -- Generates an intrinsic function name
  fun genFunLabel (name) {
     if scopeDepth == 1
     then [sprintf ("L%s", name),             makeCompEnv (nLabels  , scopeDepth, state, nLocals, nArgs, functions)]
     else [sprintf ("L%s_%d", name, nLabels), makeCompEnv (nLabels+1, scopeDepth, state, nLocals, nArgs, functions)]
     fi
  }

  -- Checks if the current scope is a global
  fun isGlobal () {
    scopeDepth == 1
  }

  [genLabel,
   rememberFun,
   beginScope,
   endScope,
   addArg,
   addVar,
   beginFun,
   getFuns,
   lookupVar,
   lookupFun,
   getLocals,
   genFunLabel,
   addFun,
   isGlobal
  ]
}

-- Initialize a new compilation environment
fun initCompEnv () {
  makeCompEnv (0, 0, emptyState (), 0, 0, {})
}

-- Accessor functions
fun genLabel (env) {
  env [0] ()
}

fun rememberFun (env, name, args, body) {
  env [1] (name, args, body)
}

fun beginScope (env) {
  env [2] ()
}

fun endScope (env) {
  env [3] ()
}

fun addArg (env, name) {
  env [4] (name)
}

fun addVar (env, name) {
  env [5] (name)
}

fun beginFun (env, state) {
  env [6] (state)
}

fun getFuns (env) {
  env [7] ()
}

fun lookupVar (env, name) {
  env [8] (name)
}

fun lookupFun (env, name) {
  env [9] (name)
}

fun getLocals (env) {
  env [10] ()
}

fun genFunLabel (env, name) {
  env [11] (name)
}

fun addFun (env, name, fLabel, nargs) {
  env [12] (name, fLabel, nargs)
}

fun isGlobal (env) {
  env [13] ()
}

-- Helper function: generates n labels
fun genLabels (env, n) {
  fun inner (env, n) {
    if n == 0
    then {env}
    else case genLabel (env) of
           [lab, env] -> lab : inner (env, n-1)
         esac
    fi
  }

  listArray (inner (env, n))
}

-- Helper function: adds a bunch of arguments
fun addArgs (env, names) {
  foldl (fun (env, name) {addArg (env, name)}, env, names)
}

-- Helper function: adds a bunch of locals
fun addVars (env, names) {
  foldl (fun (env, name) {addVar (env, name)}, env, names)
}

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.

(* Assignment *)

-- Some guidelines for compiling functions and scopes.
--
-- 1. use env.beginScope/env.endScope properly;
-- 2. in each scope traverse the definitions twice:
--    a. first, add all bindings into symbolic state,
--       using end.addVar/env.addFun;
--    b. do not forget to generate GLOBAL instructions for
--       top-level variable declarations;
--    c. on the secord traversal add functions themselves for
--       future code generation (use env.rememberFun).
-- 3. the overall flow for code generation:
--    a. generate the code for the topmost expression (the program itself);
--    b. take list of nested functions definitions via env.getFuns and
--       generate the code for each function;
--    c. repeat b. until no function definitions appear.
-- 4. when compiling functions, do not forget to create proper
--    environment (use env.beginFun) and register arguments
--    (use env.addArg).

-- Compiles an expression into a stack machine code.
-- Takes an expression, returns a list of stack machine
-- instructions.
public fun compileSM (stmt) {
  fun label (lab, labUsed) {
    if labUsed
    then singletonBuffer (LABEL (lab))
    else emptyBuffer ()
    fi
  }

  fun addFuns(funs, env) {
    foldl(
      fun(env, Fun(fLabel, args, body)) {
        rememberFun(env, fLabel, args, body)
      },
      env,
      funs
    )
  }

  fun addGlobalVars(env, vars) {
    if isGlobal(env)
    then
      foldl(
        fun (code, v) {
          code <+ GLOBAL (v)
        },
        emptyBuffer(),
        vars
      )
    else emptyBuffer()
    fi
  }

  fun addDefs(env, defs) {
    foldl(
      fun ([funs, env, code], def) {
        case def of
          Var (ds) -> [funs, addVars(env, ds), code <+> addGlobalVars(env, ds)]
          | Fun (name, args, body) -> 
            case genFunLabel(env, name) of
              [funLab, env] -> [Fun(funLab, args, body):funs, addFun(env, name, funLab, size(args)), code]
            esac
        esac
      },
      [{}, env, emptyBuffer()],
      defs
    )
  }

  fun compile (lab, env, stmt) {
    case stmt of
    Scope (defs, expr) ->
          case addDefs(beginScope(env), defs) of
            [funs, env, defCode] -> 
              case genLabel(addFuns(funs, env)) of
                [lab, env] -> 
                  case compile(lab, env, expr) of
                    [labUsed, env, code] -> [false, endScope(env), defCode <+> code <+> label(lab, labUsed)]
                  esac
              esac
          esac
    | Call (name, exprList) -> 
      case genLabel(env) of
        [lab, env] -> 
          case compile(lab, env, foldl(
            fun (stmt, e) {
              Seq(stmt, e)
            },
            Skip,
            exprList
          )) of
            [labUsed, env, code] -> 
              case lookupFun(env, name) of
                Fun (name, nargs) -> [false, env, code <+> label(lab, labUsed) <+ CALL(name, nargs)]
              esac
          esac
      esac
    | Skip              -> [false, env, emptyBuffer ()]
    | Var    (x)        -> [false, env, singletonBuffer (LD (lookupVar(env, x)))]
    | Ref    (x)        -> [false, env, singletonBuffer (LDA (lookupVar(env, x)))]
    | Const  (n)        -> [false, env, singletonBuffer (CONST (n))]
    | Ignore (e) -> 
        case genLabel(env) of 
          [lab, env] ->
            case compile(lab, env, e) of
              [labUsed, env, code] -> [false, env, code <+> label(lab, labUsed) <+ DROP]
            esac
        esac
    | Binop (op, e1, e2) -> 
        case genLabel(env) of 
          [lab, env] ->
            case compile(lab, env, Seq (e1, e2)) of 
              [labUsed, env, code] -> [false, env, code <+> label(lab, labUsed) <+ BINOP(op)]
            esac
        esac
    | Read  (x) -> [false, env, singletonBuffer (READ) <+ ST (lookupVar(env, x)) <+ DROP]
    | Write (e) -> 
        case compile(lab, env, e) of
          [labUsed, env, code] -> [false, env, code <+> label(lab, labUsed) <+ WRITE]
        esac
        | Assn  (refE, e)   ->
        case genLabel(env) of 
          [eLab, env] ->
            case compile(eLab, env, Seq (refE, e)) of 
              [labUsed, env, code] -> [false, env, code <+> label(eLab, labUsed) <+ STI]
            esac
        esac
    | Seq   (e1, e2) ->
        case genLabel(env) of
          [e2Lab, env] ->
             case compile (e2Lab, env, e1) of
               [e2LabUsed, env, e1Code] ->
                  case compile (lab, env, e2) of
                    [labUsed, env, e2Code] -> [labUsed, env, e1Code <+> label (e2Lab, e2LabUsed) <+> e2Code]
                  esac
             esac
        esac
        | If (cond, e1, e2) ->
        case genLabel(env) of 
          [falseLab, env] ->
            case compile (lab, env, e1) of 
              [_, env, e1code] ->
                case compile (lab, env, e2) of
                  [_, env, e2code] ->
                    case genLabel(env) of
                      [condLab, env] -> 
                        case compile(condLab, env, cond) of 
                          [condLabUsed, env, condCode] -> [true, env, condCode <+> label(condLab, condLabUsed) <+ CJMP ("z", falseLab) <+> e1code <+ JMP (lab) <+ LABEL (falseLab) <+> e2code]
                        esac
                    esac
                esac
            esac
        esac
    | While (cond, e) ->
        case genLabel(env) of 
          [cycleLab, env] ->
            case compile (cycleLab, env, e) of 
              [_, env, scode] -> 
                case genLabel(env) of 
                  [condLab, env] -> 
                    case compile(condLab, env, cond) of 
                      [condLabUsed, env, condCode] -> [true, env,  singletonBuffer(LABEL (cycleLab)) <+> condCode <+> label(condLab, condLabUsed) <+ CJMP ("z", lab) <+> scode <+ JMP (cycleLab)]
                    esac
                esac
            esac
        esac
    | DoWhile (e, cond) ->
        case genLabel(env) of 
          [cycleLab, env] ->
            case compile (cycleLab, env, e) of 
              [_, env, scode] -> 
                case genLabel(env) of 
                  [condLab, env] -> 
                    case compile(condLab, env, cond) of 
                      [condLabUsed, env, condCode] -> [false, env, singletonBuffer(LABEL (cycleLab)) <+> scode <+> condCode <+> label(condLab, condLabUsed) <+ CJMP ("nz", cycleLab)]
                    esac
                esac
            esac
        esac
    | _                 ->  failure ("compileSM not implemented\n")
    esac
  }

  fun genFun(env, Fun (name, args, body, state)) {
      case genLabel(env) of
        [lab, env] ->
          case compile (lab, addArgs(beginFun(env, state), args), body) of
            [labUsed, env, code] -> [env,
              singletonBuffer(LABEL(name))
              <+ BEGIN(name, size(args), getLocals(env)) 
              <+> code
              <+> label (lab, labUsed)
              <+ END]
          esac
      esac
  }

  fun genFuns(funs, envE) {
    case funs of
      func:otherFuns -> 
        case genFun(envE, func) of 
          [env, codeFun] ->
            case getFuns(env) of
              [innerFuns, envE] ->
                case genFuns(innerFuns+++otherFuns, envE) of
                  [codeFuns, env] -> [codeFun <+> codeFuns, env]
                esac 
            esac
        esac 
      | {} -> [emptyBuffer(), envE]
    esac
  }
  case initCompEnv ().genLabel of
    [endLab, env] ->
      case compile (endLab, env, stmt) of
        [endLabUsed, env, code] ->
          case getFuns(env) of 
            [funs, envE] ->
              case genFuns(funs, envE) of 
                [codeFuns, _] ->
                  getBuffer $
                  singletonBuffer(LABEL("main"))
                  <+ BEGIN("main", 0, getLocals(env)) 
                  <+> code
                  <+> label (endLab, endLabUsed)
                  <+ END 
                  <+> codeFuns
              esac
          esac
      esac
  esac
}

