-- Expression evaluator

import List;
import Array;
import State;
import World;
import Lexer;
import Parser;
import Fun;
import Builtins;

-- As association map which maps "\otimes" into "\oplus"
var ops = {
  ["+" , infix + ],
  ["-" , infix - ],
  ["*" , infix * ],
  ["/" , infix / ],
  ["%" , infix % ],
  ["==", infix ==],
  ["!=", infix !=],
  ["<" , infix < ],
  ["<=", infix <=],
  [">" , infix > ],
  [">=", infix >=],
  ["&&", infix &&],
  ["!!", infix !!]
};

-- The evaluator for infix operators: takes an operator as a string
-- and two operand values, and returns the result
public fun evalOp (op, l, r) {
  case assoc (ops, op) of
    Some (f) -> f (l, r)
  esac
}

-- Evaluates an expression "expr" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A expression is represented by a data structure of the following shape:
--
-- expr = Assn    (expr, expr)         |
--        Set     (string, expr)       |
--        Seq     (expr, expr)         |
--        Skip                         |
--        if      (expr, expr, expr)   |
--        While   (expr, expr)         |
--        DoWhile (expr, expr)         |
--        Var     (string)             |
--        Ref     (string)             |
--        Const   (int)                |
--        Binop   (string, expr, expr) |
--        Call    (string, expr list)  |
--        Ignore  (expr)               |
--        String  (string)             |
--        Array   (expr list)          |
--        Elem    (expr, expr)         |
--        ElemRef (expr, expr)         |
--        Builtin (string, expr list)

-- Helper function: checks that given name designates a regular variable in
-- a given state
fun lookupVal (state, name) {
  case state.lookup (name) of
    x@Val (_) -> x
  | _         -> error (sprintf ("the name ""%s"" does not designate a variable", name), getLoc (name))
  esac
}

-- Helper function: checks that given name designates a function in
-- a given state
fun lookupFun (state, name) {
  case state.lookup (name) of
    x@Fun (_, _) -> x
  | _            -> error (sprintf ("the name ""%s"" does not designate a function", name), getLoc (name))
  esac
}

-- Helper function: adds a bunch of regular variables current scope
fun addNames (state, names) {
  foldl (fun (s, name) {s.addName (name, Val (0))}, state, names)
}

-- Helper function: adds a function in current scope
fun addFunction (state, name, args, body) {
  state.addName (name, Fun (args, body))
}
                                        
-- Evaluates a list of expressions, properly threading a configurations.
-- Returns the final configuration and the list of values
fun evalList (c, exprs) {
  case foldl (fun ([c, vals], e) {
                case eval (c, e) of
                  [c, v] -> [c, v : vals]
                esac
              },
              [c, {}],
              exprs) of
    [c, vals] -> [c, reverse (vals)]
  esac
}

(* Assignment *)
fun eval (c@[st, wrld], expr) {
  fun addDef(st, def) {
    case def of 
      Var (ds) -> addNames(st, ds)
      | Fun (name, args, body) -> addFunction(st, name, args, body)
    esac
  }

  fun addDefs(st, defs) {
      case defs of 
        d : defs -> addDefs(addDef(st, d), defs) |
        _ -> st
      esac
  }

  case expr of
    Scope (defs, expr) -> 
      case eval([addDefs(enterScope(st), defs), wrld], expr) of 
        [[st, wrld], v] -> [[leaveScope(st), wrld], v]
      esac
    | Call (name, exprList) ->
        case checkFun(st, name) of
          _ -> 
            case lookup(st, name) of 
              Fun (args, body) ->
                case evalList(c, exprList) of
                  [[st, _], values] ->
                    case foldl(fun(st, [arg, v]){st.addName(arg, Var (v))}, enterFunction(st), zip(args, values)) of 
                      stBegin -> 
                        case eval([stBegin, wrld], body) of
                          [[stEnd, wrld], v] -> [[leaveFunction(st, getGlobal(stEnd)), wrld], v]
                        esac
                    esac
                esac
            esac 
        esac
    | Const (n) -> [c, n]
    | Var (x) -> [c, case lookup(st, x) of Var (v) -> v esac]
    | Ref (x) -> [c, x]
    | Binop (op, e1, e2) ->
        case evalList(c, {e1,e2}) of 
          [c, v1:v2:_] -> [c, evalOp(op, v1, v2)]
        esac
    | Assn (ref, e) ->
        case evalList(c, {ref, e}) of 
          [[st, wrld], x:v:_] -> [[st <- [x, Var (v)], wrld], v]
        esac
    | Seq (e1, e2) ->
        case evalList(c, {e1, e2}) of 
          [c, v1:v2:t] -> [c, v2]
        esac
    | Skip -> [c, Void]
    | Read (x) -> 
        case readWorld(wrld) of 
          [v, newWrld] -> [[st <- [x, Var(v)], newWrld], Void]
        esac
    | Write (e) -> 
        case eval(c, e) of 
          [c, v] -> [[st, writeWorld(v, wrld)], Void]
        esac
    | If (cond, e1_, e2_) ->
      case eval(c, cond) of 
        [c, 0] -> eval(c, e2_) |
        [c, _] -> eval(c, e1_)
      esac
    | While (cond, e_) ->

      case eval(c, cond) of
        [c, 0] -> [c, Void] |
        [c, _] -> 
          case eval(c, e_) of 
            [c, _] -> eval(c, While (cond, e_))
          esac
      esac
    | DoWhile (e_, cond) -> 
        case eval(c, e_) of 
          [c, _] -> eval(c, While (cond, e_))
        esac
    | Ignore (e) -> 
      case eval(c, e) of 
        [c, v] -> [c, Void]
      esac
  esac
}


-- Evaluates a program with a given input and returns an output
public fun evalExpr (input, expr) {
  case eval ([emptyState ().enterScope.addName ("read",   Fun ({}, External))
                                      .addName ("write",  Fun ({"a"}, External))
                                      .addName ("length", Fun ({"a"}, External)), createWorld (input)], expr) of
    [c, _] -> c.snd.getOutput
  esac
}
