-- Expression evaluator

import List;
import State;


-- The evaluator itself: takes a state and an expression,
-- returns integer value
--
-- An expression is represented by a data structure of the following shape:
--
-- expr = Var   (string)             |
--        Const (int)                |
--        Binop (string, expr, expr)

public fun str2op(opStr) {
  case opStr of 
    "+" -> (infix +)
    | "-" -> (infix -)
    | "*" -> (infix *)
    | "/" -> (infix /)
    | "%" -> (infix %)
    | "<" -> (infix <)
    | "<=" -> (infix <=)
    | ">" -> (infix >)
    | ">=" -> (infix >=)
    | "==" -> (infix ==)
    | "!=" -> (infix !=)
    | "&&" -> (infix &&)
    | "!!" -> (infix !!)
  esac
}

public fun evalExpr (st, expr) {
  case expr of 
    Var (x) -> st(x)
    | Const (cnst) -> cnst
    | Binop (op, expr1, expr2) -> str2op(op)(evalExpr(st, expr1), evalExpr(st, expr2))
  esac
}
